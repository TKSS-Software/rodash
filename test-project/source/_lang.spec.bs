function testGetFunctionNameFunction() as String
  return "Hello World"
end function

namespace Tests
  @suite("RodashLangTests")
  class LangTests extends Rooibos.BaseTestSuite

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("Tests the rodash lang methods")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("clone")
    @params(["a", "b", "c", "d"])
    @params([1, 2, 3])
    @params([{ "a": 1 }, { "b": 2 }])
    function _(cloneItem as Dynamic)
      result = rodash.clone(cloneItem)
      m.assertEqual(cloneItem, result)
    end function

    @it("eq")
    @params({ "a": 1 }, { "a": 1 }, true)
    @params("a", "a", true)
    @params(1, 2, false)
    @params(Invalid, Invalid, true)
    function _(itemOne as Dynamic, itemTwo as Dynamic, matchResult = false as Boolean)
      m.assertEqual(rodash.eq(itemOne, itemTwo), matchResult)
    end function

    @it("getFunctionName")
    function _()
      m.assertEqual(rodash.getFunctionName(testGetFunctionNameFunction), rodash.lowerCase("testGetFunctionNameFunction"))
    end function

    @it("isAA")
    @params([1, 2, 3], false)
    @params("a", false)
    @params({ "a": 1 }, true)
    function _(item as Dynamic, matchResult = false as Boolean)
      m.assertEqual(rodash.isAA(item), matchResult)
    end function

    @it("isArray")
    @params([1, 2, 3], true)
    @params("a", false)
    @params({ "a": 1 }, false)
    function _(item as Dynamic, matchResult = false as Boolean)
      m.assertEqual(rodash.isArray(item), matchResult)
    end function

    @it("isArrayLike")
    @params([1, 2, 3], true)
    @params("abc", true)
    @params({ "a": 1 }, false)
    function _(item as Dynamic, matchResult = false as Boolean)
      m.assertEqual(rodash.isArrayLike(item), matchResult)
    end function

    @it("isDate")
    @params("Applesauce", false)
    @params("Mon April 23 2012", false)
    @params(Invalid, true)
    function _(value = Invalid as Dynamic, matchResult = false as Boolean)
      if rodash.isInvalid(value) then value = CreateObject("roDateTime")
      m.assertEqual(rodash.isDate(value), matchResult)
    end function

    @it("isDouble")
    @params("RO_DOUBLE", true)
    @params("RO_INTRINSIC_DOUBLE", true)
    @params("RO_FLOAT", false)
    @params("AA", false)
    function _(objectType = Invalid as Dynamic, matchResult = false as Boolean)
      if objectType = "RO_DOUBLE"
        value = createObject("roDouble")
      else if objectType = "RO_INTRINSIC_DOUBLE"
        value = createObject("roIntrinsicDouble") 'bs:disable-line 1129
      else if objectType = "RO_FLOAT"
        value = createObject("roFloat")
      else
        value = {}
      end if
      m.assertEqual(rodash.isDouble(value), matchResult)
    end function

    @it("isEmpty")
    @params("", true)
    @params("Applesauce", false)
    @params([], true)
    @params([1], false)
    @params({ a: 1 }, false)
    @params({}, true)
    @params(Invalid, true)
    @params(1, true)
    function _(value = Invalid as Dynamic, matchResult = false as Boolean)
      m.assertEqual(rodash.isEmpty(value), matchResult)
    end function

    @it("isEmptyString")
    @params("", true)
    @params("Applesauce", false)
    @params(1, false)
    function _(value = Invalid as Dynamic, matchResult = false as Boolean)
      m.assertEqual(rodash.isEmptyString(value), matchResult)
    end function

    @it("isFloat")
    @params(1.0, false)
    @params(1.1, true)
    @params(1111111111.1, true)
    @params("1", false)
    function _(item as Dynamic, matchResult = false as Boolean)
      m.assertEqual(rodash.isFloat(item), matchResult)
    end function

    @it("isFunction")
    @params(true, true)
    @params(false, false)
    @params({}, false)
    @params("item", false)
    function _(item as Dynamic, matchResult = false as Boolean)
      if rodash.isBoolean(item) AND item then
        item = function()
        end function
      end if
      m.assertEqual(rodash.isFunction(item), matchResult)
    end function

    @it("isInvalid")
    @params(Invalid, true)
    @params({ a: 2 }, false)
    @params(1, false)
    @params(uninitializedVar, true) 'bs:disable-line 1001
    function _(value = Invalid as Dynamic, matchResult = Invalid as Dynamic)
      m.assertEqual(rodash.isInvalid(value), matchResult)
    end function

    @it("isNonEmptyAA")
    @params("", false)
    @params("Applesauce", false)
    @params([], false)
    @params([1], false)
    @params({ a: 1 }, true)
    @params({}, false)
    @params(Invalid, false)
    function _(value = Invalid as Dynamic, matchResult = false as Boolean)
      m.assertEqual(rodash.isNonEmptyAA(value), matchResult)
    end function

    @it("isNonEmptyArray")
    @params("", false)
    @params("Applesauce", false)
    @params([], false)
    @params([1], true)
    @params({ a: 1 }, false)
    @params({}, false)
    @params(Invalid, false)
    function _(value = Invalid as Dynamic, matchResult = false as Boolean)
      m.assertEqual(rodash.isNonEmptyArray(value), matchResult)
    end function

    @it("isNonEmptyString")
    @params("", false)
    @params("Applesauce", true)
    @params([], false)
    @params([1], false)
    @params({ a: 1 }, false)
    @params({}, false)
    @params(Invalid, false)
    function _(value = Invalid as Dynamic, matchResult = false as Boolean)
      m.assertEqual(rodash.isNonEmptyString(value), matchResult)
    end function

    @it("isLength")
    @params(0, true)
    @params(3, true)
    @params({ a: 2 }, false)
    @params("apple", false)
    @params(Invalid, false)
    function _(value = Invalid as Dynamic, matchResult = Invalid as Dynamic)
      m.assertEqual(rodash.isLength(value), matchResult)
    end function

    @it("isNotInvalid")
    @params(Invalid, false)
    @params({ a: 2 }, true)
    @params(1, true)
    @params(uninitializedVar, false) 'bs:disable-line 1001
    function isNotInvalid(value = Invalid as Dynamic, matchResult = Invalid as Dynamic)
      m.assertEqual(rodash.isNotInvalid(value), matchResult)
    end function

    @it("toArray")
    @params({ "a": 1, "b": 2 }, [1, 2])
    @params("abc", ["a", "b", "c"])
    @params("hello world", ["h", "e", "l", "l", "o", " ", "w", "o", "r", "l", "d"])
    @params(1, [])
    @params(Invalid, [])
    function _(value = Invalid as Dynamic, matchResult = Invalid as Dynamic)
      m.assertEqual(rodash.toArray(value), matchResult)
    end function

    @it("toString")
    @params([1], "[1]")
    @params({ a: 2 }, "{a: 2}")
    @params(1, "1")
    function _(value = Invalid as Dynamic, matchResult = Invalid as Dynamic)
      m.assertEqual(rodash.toString(value), matchResult)
    end function
  end class
end namespace
