namespace Tests
  @suite("RodashCollectionTests")
  class CollectionTests extends Rooibos.BaseTestSuite

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("Tests the rodash collection methods")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("find")
    @params(invalid, { "user": "barney",  "active": false })
    @params({ "user": "fred", "active": false }, { "user": "fred", "active": false })
    @params(["active", false], { "user": "barney", "active": false })
    @params("active", { "user": "pebbles", "active": true })
    @params("somethingtogetinvalid", invalid)
    function _findTest(predicate = invalid as dynamic, matchResult = invalid as dynamic)
      if rodash.isInvalid(predicate) then predicate = function(o)
        return o.user = "barney"
      end function

      users = [
        { "user": "barney", "active": false },
        { "user": "fred", "active": false },
        { "user": "pebbles", "active": true }
      ]
      result = rodash.find(users, predicate)
      m.assertEqual(result, matchResult)
    end function

    @it("groupBy")
    function _()
      m.assertEqual(rodash.groupBy([6.1, 4.2, 6.3], rodash.floor), { "4": [4.2], "6": [6.1, 6.3] })
      m.assertEqual(rodash.groupBy([{"species": "cat", "name": "Maddie"}, {"species": "cat", "name": "Rosie"}, {"species": "cat", "name": "Lucy"}, {"species": "dog", "name": "Darwin"}], "species"), { "cat": [{"species": "cat", "name": "Maddie"}, {"species": "cat", "name": "Rosie"}, {"species": "cat", "name": "Lucy"}], "dog": [{"species": "dog", "name": "Darwin"}] })
    end function

    @it("orderBy")
    @params(["user", "age"], ["asc", "desc"], [{ "user": "barney", "age": 36 }, { "user": "barney", "age": 34 }, { "user": "fred",   "age": 48 }, { "user": "fred",   "age": 40 }])
    @params(["user", "age"], ["desc", "desc"], [{ "user": "fred",   "age": 48 }, { "user": "fred",   "age": 40 }, { "user": "barney", "age": 36 }, { "user": "barney", "age": 34 }])
    @params(["user", "age"], ["desc"], [{ "user": "fred",   "age": 40 }, { "user": "fred",   "age": 48 }, { "user": "barney", "age": 34 }, { "user": "barney", "age": 36 }])
    function _orderTest(iterees = invalid as dynamic, orders = invalid as dynamic, matchResult = invalid as dynamic)
      users = [
        { "user": "fred",   "age": 48 },
        { "user": "barney", "age": 34 },
        { "user": "fred",   "age": 40 },
        { "user": "barney", "age": 36 }
      ]
      result = rodash.orderBy(users, iterees, orders)
      m.assertEqual(result, matchResult)
    end function
  end class

end namespace