namespace rodash
    ' Creates a duplicate-free version of an array, in which only the first occurrence of each element is kept. The order of result values is determined by the order they occur in the array.
    ' @since 0.0.29
    ' @category Array
    ' @param [{Array}] array - The arrays to inspect
    ' @returns [Array] Returns the new array of filtered values.
    ' @example
    ' rodash.xor([[2, 1], [2, 3]]) // => [1, 3]
    ' rodash.xor([[2, 1], [2, 3], [2, 3]]) // => [1]
    function xor(arrays as Object) as Object
        ' Create an array to store the result of the XOR operation (elements with count 1)
        resultArray = []

        if rodash.isNonEmptyArray(arrays) then
            ' Use roAssociativeArray for element count tracking
            elementCounts = {}
            orderedElements = [] ' To preserve the order

            ' Iterate through each sub-array in the arrays
            for each subArray in arrays
                if rodash.isNonEmptyArray(subArray) then
                    ' Iterate through each element in the sub-array
                    for each element in subArray
                        ' Create a unique key based on the element's type and value
                        elementKey = type(element) + ":" + rodash.toString(element)

                        ' Check if the element has been encountered before
                        if elementCounts.doesExist(elementKey) then
                            ' Increment the count if it already exists
                            elementCounts[elementKey] += 1
                        else
                            ' Add to dictionary with count 1 and preserve the original order
                            elementCounts[elementKey] = 1
                            orderedElements.push(element)
                        end if
                    end for
                end if
            end for

            for each element in orderedElements
                elementKey = type(element) + ":" + rodash.toString(element)
                ' Include elements that appeared exactly once
                if elementCounts[elementKey] = 1
                    resultArray.push(element)
                end if
            end for
        end if

        return resultArray
    end function
end namespace
