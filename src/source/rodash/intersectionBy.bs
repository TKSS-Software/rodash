
namespace rodash
  '/**
  ' * @name intersectionBy
  ' * @description This method is like rodash.intersection except that it accepts iteratee which is invoked for each element of each arrays to generate the criterion by which they're compared. The order and references of result values are determined by the first array. The iteratee is invoked with one argument:(value).
  ' * @param {Array} mainArray - The main array to inspect
  ' * @param {Array} inspect - The array to find matches
  ' * @param {Dynamic} iteratee - The iteratee invoked per element
  ' * @return {Array} Returns the new array of intersecting values
  ' */
  function intersectionBy(mainArray = [] as object, inspectArray = [] as object, iteratee = invalid) as object
    intersectArray = []

    mainArray = rodash.clone(mainArray)
    inspectArray = rodash.clone(inspectArray)

    if rodash.isInvalid(iteratee) then
      if rodash.isNonEmptyArray(mainArray) then
        for each item in mainArray
          if NOT rodash.isEqual(rodash.indexOf(inspectArray, item), - 1) then intersectArray.push(item)
        end for
      end if
    else if rodash.isFunction(iteratee) then
      for i = 0 to inspectArray.count() - 1
        inspectArray[i] = iteratee(inspectArray[i])
      end for
      for each item in mainArray
        if NOT rodash.isEqual(rodash.indexOf(inspectArray, iteratee(item)), - 1) then intersectArray.push(item)
      end for
    else if rodash.isString(iteratee) then
      for each item in mainArray
        findKey = item[iteratee]
        if rodash.isNotInvalid(findKey) then
          matchValue = {}
          matchValue[iteratee] = findKey
          if NOT rodash.isEqual(rodash.findIndex(inspectArray, matchValue), - 1) then intersectArray.push(item)
        end if
      end for
    end if

    return intersectArray
  end function
end namespace
