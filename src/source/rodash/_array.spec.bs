namespace Tests
  @suite("RodashArrayTests")
  class ArrayTests extends Rooibos.BaseTestSuite

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("Tests the rodash array methods")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("chunk")
    @params(["a", "b", "c", "d"], 2, [["a", "b"], ["c", "d"]])
    @params(["a", "b", "c", "d"], 3, [["a", "b", "c"], ["d"]])
    function _chunkTest(array as object, chunkSize = 1 as integer, matchResult = [] as object)
      result = rodash.chunk(array, chunkSize)
      m.assertEqual(result, matchResult)
    end function


    @it("compact")
    @params([0, 1, false, 2, "", 3], [1, 2, 3])
    function _compactTest(array as object, matchResult = [] as object)
      result = rodash.compact(array)
      m.assertEqual(result, matchResult)
    end function


    @it("concat")
    @params([1], [2, [3], [[4]]], [1, 2, 3, [4]])
    function _concatTest(arrayOne as object, arrayTwo as object, matchResult = [] as object)
      result = rodash.concat(arrayOne, arrayTwo)
      m.assertEqual(result, matchResult)
    end function


    @it("difference")
    @params([2, 1], [2, 3], [1])
    function _differenceTest(arrayOne as object, arrayTwo as object, matchResult = [] as object)
      result = rodash.difference(arrayOne, arrayTwo)
      m.assertEqual(result, matchResult)
    end function


    @it("drop")
    @params([1, 2, 3], invalid, [2, 3])
    @params([1, 2, 3], 2, [3])
    @params([1, 2, 3], 5, [])
    @params([1, 2, 3], 0, [1, 2, 3])
    function _dropTest(array as object, n = invalid as dynamic, matchResult = [] as object)
      if rodash.isInvalid(n) then
        result = rodash.drop(array)
      else
        result = rodash.drop(array, n)
      end if
      m.assertEqual(result, matchResult)
    end function


    @it("dropRight")
    @params([1, 2, 3], invalid, [1, 2])
    @params([1, 2, 3], 2, [1])
    @params([1, 2, 3], 5, [])
    @params([1, 2, 3], 0, [1, 2, 3])
    function _dropRightTest(array as object, n = invalid as dynamic, matchResult = [] as object)
      if rodash.isInvalid(n) then
        result = rodash.dropRight(array)
      else
        result = rodash.dropRight(array, n)
      end if
      m.assertEqual(result, matchResult)
    end function


    @it("fill")
    @params([1, 2, 3], "a", invalid, invalid, ["a", "a", "a"])
    @params([1, 2, 3], 2, invalid, invalid, [2, 2, 2])
    @params([4, 6, 8, 10], "*", 1, 3, [4, "*", "*", 10])
    function _fillTest(array as object, value = invalid as dynamic, startPos = invalid, endPos = invalid, matchResult = [] as object)
      result = rodash.fill(array, value, startPos, endPos)
      m.assertEqual(result, matchResult)
    end function


    @it("findIndex")
    @params(invalid, 0)
    @params({ "user": "fred", "active": false }, 1)
    @params(["active", false], 0)
    @params("active", 2)
    function _findIndexTest(predicate = invalid as dynamic, matchResult = -1 as integer)
      if rodash.isInvalid(predicate) then predicate = function(o)
        return o.user = "barney"
      end function

      users = [
        { "user": "barney",  "active": false },
        { "user": "fred",    "active": false },
        { "user": "pebbles", "active": true }
      ]
      result = rodash.findIndex(users, predicate)
      m.assertEqual(result, matchResult)
    end function


    @it("findLastIndex")
    @params(invalid, 2)
    @params({ "user": "barney", "active": true }, 0)
    @params(["active", false], 2)
    @params("active", 0)
    function _findLastIndexTest(predicate = invalid as dynamic, matchResult = -1 as integer)
      if rodash.isInvalid(predicate) then predicate = function(o)
        return o.user = "pebbles"
      end function

      users = [
        { "user": "barney",  "active": true },
        { "user": "fred",    "active": false },
        { "user": "pebbles", "active": false }
      ]
      result = rodash.findLastIndex(users, predicate)
      m.assertEqual(result, matchResult)
    end function


    @it("first")
    @params([1, 2, 3], 1)
    @params([2, 3, 1], 2)
    @params([], invalid)
    function _firstTest(array = [] as object, matchResult = invalid as dynamic)
      result = rodash.first(array)
      m.assertEqual(result, matchResult)
    end function


    @it("flatten")
    @params([1, [2, [3, [4]], 5]], [1, 2, [3, [4]], 5])
    function _flattenTest(array = [] as object, matchResult = invalid as dynamic)
      result = rodash.flatten(array)
      m.assertEqual(result, matchResult)
    end function


    @it("flattenDeep")
    @params([1, [2, [3, [4]], 5]], [1, 2, 3, 4, 5])
    function _flattenDeepTest(array = [] as object, matchResult = invalid as dynamic)
      result = rodash.flattenDeep(array)
      m.assertEqual(result, matchResult)
    end function

    @it("flattenDepth")
    @params([1, [2, [3, [4]], 5]], 1, [1, 2, [3, [4]], 5])
    @params([1, [2, [3, [4]], 5]], 2, [1, 2, 3, [4], 5])
    function _flattenDeepTest(array = [] as object, depth = 1 as integer, matchResult = invalid as dynamic)
      result = rodash.flattenDepth(array, depth)
      m.assertEqual(result, matchResult)
    end function


  end class

end namespace