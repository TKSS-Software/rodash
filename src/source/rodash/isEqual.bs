import "internal/canBeCompared.bs"
import "isAA.bs"
import "isArray.bs"
import "isNode.bs"

namespace _
  ' /**
  ' * @name isEqual
  ' * @description Checks if the supplied values are the same.
  ' * @param {Dynamic} valueOne - First value.
  ' * @param {Dynamic} valueTwo - Second value.
  ' * @return {Boolean} True if the values are the same and false if not or if any of the values are a type that could not be compared.
  ' */
  function isEqual(valueOne as Dynamic, valueTwo as Dynamic) as Boolean
    ' If the first argument is true we don't need to check the follwing conditionals
    if _.internal.canBeCompared(valueOne, valueTwo) then
      return (valueOne = valueTwo)
    else if _.isNode(valueOne) then
      if _.isNode(valueTwo) then return valueOne.isSameNode(valueTwo)
    else if _.isAA(valueOne) then
      if _.isAA(valueTwo) AND (_.join(valueOne.keys(), ",") = _.join(valueTwo.keys(), ",")) then return (formatJson(valueOne) = formatJson(valueTwo))
    else if _.isArray(valueOne) then
      if _.isArray(valueTwo) AND (valueOne.count() = valueTwo.count()) then return (formatJson(valueOne) = formatJson(valueTwo))
    end if

    return false
  end function
end namespace