import "clone.bs"
import "floor.bs"
import "isAA.bs"
import "isArray.bs"
import "isEqual.bs"
import "isFunction.bs"
import "isInvalid.bs"
import "random.bs"
import "toArray.bs"


namespace _
  ' /**
  ' * @name shuffle
  ' * @description Creates an array of shuffled values, using a version of the Fisher-Yates shuffle.
  ' * @param {Dynamic} collection - The collection to shuffle
  ' * @return {Array} Returns the new shuffled array
  ' */
  function shuffle(collection = [] as dynamic)
    if _.isInvalid(collection) OR (NOT _.isArray(collection) AND NOT _.isAA(collection)) then return []
    if _.isAA(collection) then collection = _.toArray(collection)

    length = collection.count() - 1
    if _.isEqual(length, -1) then return []

    index = -1
    lastIndex = length - 1
    result = _.clone(collection)

    while index < length
      index ++
      rand = index + _.floor(_.random(0, 1, true) * (lastIndex - index + 1))
      value = result[rand]
      result[rand] = result[index]
      result[index] = value
    end while

    return result
  end function
end namespace