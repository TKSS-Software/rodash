namespace rodash
  ' This method is like rodash.difference except that it accepts iteratee which is invoked for each element of array and values to generate the criterion by which they're compared. The order and references of result values are determined by the first array. The iteratee is invoked with one argument:(value).
  ' @since 0.0.21
  ' @category Array
  ' @param {Array} array - The array to inspect
  ' @param {Array} values - The values to exclude
  ' @param {Dynamic} iteratee - The iteratee invoked per element
  ' @returns {Array} Returns the new array of filtered values
  ' @example
  ' rodash.differenceBy([2.1, 1.2], [2.3, 3.4], rodash.floor) // => [1.2]
  ' rodash.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x') // => [{ 'x': 2 }]
  function differenceBy(array = CreateObject("roArray", 0, true) as Object, values = CreateObject("roArray", 0, true) as Object, iteratee = Invalid) as Object
    iterateeIsFunction = rodash.isFunction(iteratee)
    iterateeIsProperty = NOT iterateeIsFunction AND rodash.isString(iteratee)

    returnArray = CreateObject("roArray", 0, true)
    for each item in array
      convertedItem = item
      if iterateeIsFunction then
        convertedItem = iteratee(item)
      else if iterateeIsProperty then
        convertedItem = item[iteratee]
      end if
      found = false

      for each valueToMatch in values
        if iterateeIsFunction then
          valueToMatch = iteratee(valueToMatch)
        else if iterateeIsProperty
          valueToMatch = valueToMatch[iteratee]
        end if
        if convertedItem = valueToMatch then found = true : exit for
      end for

      if NOT found then returnArray.push(item)
    end for

    return returnArray
  end function
end namespace
