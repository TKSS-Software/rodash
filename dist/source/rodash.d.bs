' /**
' * @member add
' * @memberof module:rodash
' * @description Adds two numbers
' * @param {Dymanic} augend - The first number in an addition
' * @param {Dymanic} addend - The second number in an addition
' * @return {Integer} Returns the total
' */
function add(augend, addend)
end function
' /**
' * @name assign
' * @description Assigns own enumerable string keyed properties of source objects to the destination object. Source objects are applied from left to right. Subsequent sources overwrite property assignments of previous sources.
' * This method mutates object and is loosely based on Object.assign.
' * @param {Dynamic} baseAA - The destination object
' * @return {Object} sources - The source objects
' */
function assign(baseAA as dynamic, sources = [] as object) as dynamic
end function
function asSeconds() as object
end function
' TODO: Figure out what to do here
' /**
' * @name assignIn
' * @description This method is like rodash.assign except that it iterates over own and inherited source properties.
' * This method mutates object.
' * @param {Dynamic} baseAA - The destination object
' * @return {Object} sources - The source objects
' */
function assignIn(baseAA as dynamic, sources = [] as object) as dynamic
end function
function asDateString(format = "long-date" as string) as object
end function
function assignWith(baseAA as dynamic, sources = [] as object) as dynamic
end function
function at(obj = {} as object, paths = [] as object)
end function
function assignInWith(baseAA as dynamic, sources = [] as object) as dynamic
end function
function camelCase(value = "" as string)
end function
' /**
' * @name ceil
' * @description Computes number rounded up to precision.
' * @param {Integer} number - The number to round up
' * @param {Integer} precision - The precision to round up to
' * @return {Integer} Returns the rounded up number
' */
function ceil(number = 0, precision = 0 as integer)
end function
function capitalize(value = "" as string)
end function
' /**
' * @name chunk
' * @description Creates an array of elements split into groups the length of size. If array can't be split evenly, the final chunk will be the remaining elements.
' * @param {Array} array - The array to process
' * @param {Integer} chunkSize - The length of each chunk
' * @return {Array} Returns the new array of chunks
' */
function chunk(array = [] as object, chunkSize = 1 as integer) as object
end function
function clamp(number, lower, upper) as dynamic
end function
' /**
' * @name clone
' * @description Clones objects that can be cloned.
' * @param {Dynamic} value - The value to be cloned
' * @return {Dynamic} The cloned value
' */
function clone(value = invalid as dynamic) as dynamic
end function
' /**
' * @name difference
' * @description Creates an array of array values not included in the other given arrays using SameValueZero for equality comparisons. The order and references of result values are determined by the first array.
' * @param {Array} array - The array to inspect
' * @param {Array} values - The values to exclude
' * @return {Array} Returns the new array of filtered values
' */
function difference(array = [] as object, values = [] as object) as object
end function
' /**
' * @name compact
' * @description Creates an array with all falsey values removed. The values false, 0, "", and invalid are falsey.
' * @param {Array} array - The array to compact
' * @return {Array} Returns the new array of filtered values
' */
function compact(array = [] as object) as object
end function
' /**
' * @name divide
' * @description Divides two numbers
' * @param {Dymanic} dividend - The first number in a division
' * @param {Dymanic} divisor - The second number in a division
' * @return {Integer} Returns the quotient
' */
function divide(dividend = 0 as dynamic, divisor = 0 as dynamic) as dynamic
end function
' /**
' * @name concat
' * @description Creates a new array concatenating array with any additional arrays and/or values.
' * @param {Array} array - The array to concatenate
' * @param {Array} values - The values to concatenate
' * @return {Array} Returns the new concatenated array
' */
function concat(array = [] as object, values = [] as object) as object
end function
' /**
' * @name differenceBy
' * @description This method is like rodash.difference except that it accepts iteratee which is invoked for each element of array and values to generate the criterion by which they're compared. The order and references of result values are determined by the first array. The iteratee is invoked with one argument:(value).
' * @param {Array} array - The array to inspect
' * @param {Array} values - The values to exclude
' * @param {Dynamic} iteratee - The iteratee invoked per element
' * @return {Array} Returns the new array of filtered values
' */
function differenceBy(array = [] as object, values = [] as object, iteratee = invalid) as object
end function
' /**
' * @name drop
' * @description Creates a slice of array with n elements dropped from the beginning.
' * @param {Array} array - The array to query
' * @param {Integer} n - The number of elements to drop
' * @return {Array} Returns the slice of array
' */
function drop(array = {} as object, n = 1 as integer)
end function
' /**
' * @name dropRight
' * @description Creates a slice of array with n elements dropped from the end.
' * @param {Array} array - The array to query
' * @param {Integer} n - The number of elements to drop
' * @return {Array} Returns the slice of array
' */
function dropRight(array = {} as object, n = 1 as integer)
end function
' /**
' * @name dropRightWhile
' * @description Creates a slice of array excluding elements dropped from the end. Elements are dropped until predicate returns falsey. The predicate is invoked with three arguments: (value, index, array).
' * @param {Array} array - The array to query
' * @param {Dynamic} predicate - The function invoked per iteration
' * @return {Array} Returns the slice of array
' */
function dropRightWhile(array = {} as object, predicate = invalid)
end function
'/**
' * @name dropWhile
' * @description Creates a slice of array excluding elements dropped from the beginning. Elements are dropped until predicate returns falsey. The predicate is invoked with three arguments: (value, index, array).
' * @param {Array} array - The array to query
' * @param {Dynamic} predicate - The function invoked per iteration
' * @return {Array} Returns the slice of array
' */
function dropWhile(array = [] as object, predicate = invalid)
end function
function endsWith(source = "" as string, target = "" as string, position = invalid as dynamic)
end function
function eq(value as dynamic, other as dynamic)
end function
function escapeRegExp(source = "" as string)
end function
function escape(source = "" as string)
end function
'/**
' * @name fill
' * @description Fills elements of array with value from start up to, but not including, end.
' * This method mutates array.
' * @param {Array} array - The array to fill
' * @param {Dynamic} value - The value to fill array with
' * @param {Integer} startPos - The start position
' * @param {Integer} endPos - The end position
' * @return {Array} Returns the mutated array
' */
function fill(array = [] as object, value = "" as dynamic, startPos = invalid, endPos = invalid)
end function
'/**
' * @name findLastIndex
' * @description This method is like rodash.findIndex except that it iterates over elements of collection from right to left.
' * @param {Array} array - The array to inspect
' * @param {Dynamic} predicate - The function invoked per iteration
' * @param {Integer} fromIndex - The index to search from
' * @return {Integer} Returns the index of the found element, else -1
' */
function findLastIndex(array, predicate = invalid, fromIndex = 0 as integer)
end function
'/**
' * @name findIndex
' * @description This method is like rodash.find except that it returns the index of the first element predicate returns truthy for instead of the element itself.
' * @param {Array} array - The array to inspect
' * @param {Dynamic} predicate - The function invoked per iteration
' * @param {Integer} fromIndex - The index to search from
' * @return {Integer} Returns the index of the found element, else -1
' */
function findIndex(array, predicate = invalid as dynamic, fromIndex = 0 as integer) as integer
end function
'/**
' * @name first
' * @description An alias to the head function.
' * @param {Array} array - The array to query
' * @return {Dynamic} Returns the first element of array
' */
function first(array = [])
end function
'/**
' * @name flatten
' * @description Flattens array a single level deep.
' * @param {Array} array - The array to flatten
' * @return {Dynamic} Returns the new flattened array
' */
function flatten(array = [])
end function
'/**
' * @name flattenDeep
' * @description Recursively flattens array.
' * @param {Array} array - The array to flatten
' * @return {Dynamic} Returns the new flattened array
' */
function flattenDeep(array = [])
end function
'/**
' * @name flattenDepth
' * @description Recursively flatten array up to depth times.
' * @param {Array} array - The array to flatten
' * @param {Integer} depth - The maximum recursion depth
' * @return {Dynamic} Returns the new flattened array
' */
function flattenDepth(array = invalid, depth = 1 as integer)
end function
' /**
' * @name forEach
' * @description Iterates over elements of collection and invokes iteratee for each element. The iteratee is invoked with three arguments: (value, index|key, collection). Iteratee functions may exit iteration early by explicitly returning false.
' * Note: As with other "Collections" methods, objects with a "length" property are iterated like arrays. To avoid this behavior use rodash.forIn or rodash.forOwn for object iteration.
' * @param {Dynamic} collection - The collection to iterate over
' * @param {Dynamic} iteratee - The function invoked per iteration
' * @return {Dynamic} Returns collection
' */
function forEach(collection = invalid as dynamic, iteratee = invalid as dynamic)
end function
' /**
' * @name floor
' * @description Computes number rounded down to precision
' * @param {Integer} number - The number to round down
' * @param {Integer} precision - The precision to round down to
' * @return {Integer} Returns the rounded down number
' */
function floor(number = 0, precision = 0 as integer)
end function
' /**
' * @name forEachRight
' * @description This method is like rodash.forEach except that it iterates over elements of collection from right to left.
' * @param {Dynamic} collection - The collection to iterate over
' * @param {Dynamic} iteratee - The function invoked per iteration
' * @return {Dynamic} Returns collection
' */
function forEachRight(collection = invalid as dynamic, iteratee = invalid as dynamic)
end function
' /**
' * @name forInRight
' * @description This method is like rodash.forIn except that it iterates over properties of object in the opposite order.
' * @param {Dynamic} obj - The object to iterate over
' * @param {Dynamic} iteratee - The function invoked per iteration
' * @return {Object} Returns object
' */
function forInRight(obj = {} as object, iteratee = invalid as dynamic)
end function
' /**
' * @name forIn
' * @description Iterates over own and inherited enumerable string keyed properties of an object and invokes iteratee for each property. The iteratee is invoked with three arguments: (value, key, object). Iteratee functions may exit iteration early by explicitly returning false.
' * @param {Dynamic} obj - The object to iterate over
' * @param {Dynamic} iteratee - The function invoked per iteration
' * @return {Object} Returns object
' */
function forIn(obj = {} as object, iteratee = invalid as dynamic)
end function
' /**
' * @name forOwn
' * @description Iterates over own enumerable string keyed properties of an object and invokes iteratee for each property. The iteratee is invoked with three arguments: (value, key, object). Iteratee functions may exit iteration early by explicitly returning false.
' * @param {Dynamic} obj - The object to iterate over
' * @param {Dynamic} iteratee - The function invoked per iteration
' * @return {Object} Returns object
' */
function forOwn(obj = {} as object, iteratee = invalid as dynamic)
end function
' /**
' * @name forOwnRight
' * @description This method is like rodash.forOwn except that it iterates over properties of object in the opposite order.
' * @param {Dynamic} obj - The object to iterate over
' * @param {Dynamic} iteratee - The function invoked per iteration
' * @return {Object} Returns object
' */
function forOwnRight(obj = {} as object, iteratee = invalid as dynamic)
end function
function fromISO8601String(dateString = "" as string) as object
end function
function fromSeconds(numSeconds = 0 as integer) as object
end function
' /**
' * @name get
' * @description Gets the value at path of object. If the resolved value is undefined, the defaultValue is returned in its place.
' * @param {Object} aa - Object to drill down into.
' * @param {String} keyPath - A dot notation based string to the expected value.
' * @param {Dynamic} fallback - A return fallback value if the requested field could not be found or did not pass the validator function.
' * @param {Function} validator - A function used to validate the output value matches what you expected.
' * @return {Dynamic} The result of the drill down process
' */
function get(aa as object, keyPath as string, fallback = Invalid as dynamic, validator = rodash_isNotInvalid as Function) as dynamic
end function
function getDayOfMonth() as object
end function
' TODO: Rewrite this due to scoping issue
' /**
' * @name functions
' * @description Creates an array of function property names from own enumerable properties of object.
' * @param {Dynamic} obj - The object to iterate over
' * @return {Object} Returns object
' */
function functions(obj = {} as object)
end function
' TODO: Rewrite this due to scoping issue
' /**
' * @name functionsIn
' * @description Creates an array of function property names from own and inherited enumerable properties of object.
' * @param {Dynamic} obj - The object to iterate over
' * @return {Object} Returns object
' */
function functionsIn(obj = {} as object)
end function
function getDayOfWeek() as object
end function
function getHours() as object
end function
function getLastDayOfMonth() as object
end function
function getMinutes() as object
end function
function getMilliseconds() as object
end function
function getMonth() as object
end function
function getYear() as object
end function
function gt(value as dynamic, other as dynamic)
end function
' /**
' * @name hasKeys
' * @description Checks if first level of the supplied AssociativeArray contains the Array of key strings.
' * @param {Dynamic} aaValue - AssociativeArray to be checked
' * @return {Dynamic} keys - Array of key strings
' */
function hasKeys(aaValue as dynamic, keys as dynamic) as boolean
end function
function getSeconds() as object
end function
function gte(value as dynamic, other as dynamic)
end function
'/**
' * @name head
' * @description Gets the first element of array.
' * @param {Array} array - The array to query
' * @return {Dynamic} Returns the first element of array
' */
function head(array = [] as object) as dynamic
end function
'/**
' * @name indexOf
' * @description Gets the index at which the first occurrence of value is found in array using SameValueZero for equality comparisons. If fromIndex is negative, it's used as the offset from the end of array.
' * @param {Array} array - The array to inspect
' * @param {Dynamic} value - The value to search for
' * @param {Integer} fromIndex - The index to search from
' * @return {Integer} Returns the index of the matched value, else -1
' */
function indexOf(array = [] as object, value = invalid, fromIndex = invalid)
end function
'/**
' * @name initial
' * @description Gets all but the last element of array.
' * @param {Array} array - The array to query
' * @return {Array} Returns the slice of array
' */
function initial(array = [] as object)
end function
function inRange(number as dynamic, startPos = 0 as dynamic, endPos = invalid as dynamic)
end function
' /**
' * @name nodeToString
' * @description Attempts to convert the supplied value to a string.
' * @param {Dynamic} value The value to convert.
' * @return {String} Results of the conversion.
' */
function nodeToString(node as object) as string
end function
'/**
' * @name intersection
' * @description Creates an array of unique values that are included in all given arrays using SameValueZero for equality comparisons. The order and references of result values are determined by the first array.
' * @param {Array} mainArray - The main array to inspect
' * @param {Array} inspect - The array to find matches
' * @return {Array} Returns the new array of intersecting values
' */
function intersection(mainArray = [] as object, inspectArray = [] as object) as object
end function
'/**
' * @name intersectionBy
' * @description This method is like rodash.intersection except that it accepts iteratee which is invoked for each element of each arrays to generate the criterion by which they're compared. The order and references of result values are determined by the first array. The iteratee is invoked with one argument:(value).
' * @param {Array} mainArray - The main array to inspect
' * @param {Array} inspect - The array to find matches
' * @param {Dynamic} iteratee - The iteratee invoked per element
' * @return {Array} Returns the new array of intersecting values
' */
function intersectionBy(mainArray = [] as object, inspectArray = [] as object, iteratee = invalid) as object
end function
'/**
' * @name intersectionWith
' * @description This method is like rodash.intersection except that it accepts comparator which is invoked to compare elements of arrays. The order and references of result values are determined by the first array. The comparator is invoked with two arguments: (arrVal, othVal).
' * @param {Array} mainArray - The main array to inspect
' * @param {Array} inspect - The array to find matches
' * @param {Dynamic} comparator - The comparator invoked per element
' * @return {Array} Returns the new array of intersecting values
' */
function intersectionWith(mainArray = [] as object, inspectArray = [] as object, comparator = invalid) as object
end function
' /**
' * @name isAA
' * @description Checks if the supplied value is a valid AssociativeArray type
' * @param {Dynamic} value The variable to be checked
' * @return {Boolean} Results of the check
' */
function isAA(value as dynamic)
end function
' /**
' * @name isArray
' * @description Checks if the supplied value is a valid Array type
' * @param {Dynamic} value The variable to be checked
' * @return {Boolean} Results of the check
' */
function isArray(value as dynamic)
end function
' /**
' * @name isArrayLike
' * @description Checks if the supplied value is a valid unempty Array like type
' * @param {Dynamic} value The variable to be checked
' * @return {Boolean} Results of the check
' */
function isArrayLike(value as dynamic)
end function
' /**
' * @name isByteArray
' * @description Checks if the supplied value is a valid ByteArray type
' * @param {Dynamic} value The variable to be checked
' * @return {Boolean} Results of the check
' */
function isByteArray(value as dynamic)
end function
' /**
' * @name isBoolean
' * @description Checks if the supplied value is a valid Boolean type
' * @param {Dynamic} value The variable to be checked
' * @return {Boolean} Results of the check
' */
function isBoolean(value as dynamic) as boolean
end function
' /**
' * @name isDateTime
' * @description Checks if the supplied value is a valid date time type
' * @param {Dynamic} value The variable to be checked
' * @return {Boolean} Results of the check
' */
function isDateTime(value as dynamic) as boolean
end function
' /**
' * @name isDouble
' * @description Checks if the supplied value is a valid Double type
' * @param {Dynamic} value The variable to be checked
' * @return {Boolean} Results of the check
' */
function isDouble(value as dynamic) as boolean
end function
' /**
' * @name differenceWith
' * @description This method is like rodash.difference except that it accepts comparator which is invoked to compare elements of array to values. The order and references of result values are determined by the first array. The comparator is invoked with two arguments: (arrVal, othVal).
' * @param {Array} array - The array to inspect
' * @param {Array} values - The values to exclude
' * @param {Dynamic} iteratee - The iteratee invoked per element
' * @return {Array} Returns the new array of filtered values
' */
function differenceWith(array = [] as object, values = [] as object, comparator = invalid) as object
end function
' /**
' * @name isDate
' * @description Alias to isDate function
' * @param {Dynamic} value The variable to be checked
' * @return {Boolean} Results of the check
' */
function isDate(value as dynamic) as boolean
end function
function isEmpty(value as dynamic)
end function
' /**
' * @name isElement
' * @description Alias to isNode function
' * @param {Dynamic} value The variable to be checked
' * @param {String} subType An optional subType parameter to further refine the check
' * @return {Boolean} Results of the check
' */
function isElement(value as dynamic, subType = "" as string) as boolean
end function
' /**
' * @name isEqual
' * @description Checks if the supplied values are the same.
' * @param {Dynamic} valueOne - First value.
' * @param {Dynamic} valueTwo - Second value.
' * @return {Boolean} True if the values are the same and false if not or if any of the values are a type that could not be compared.
' */
function isEqual(valueOne as dynamic, valueTwo as dynamic) as boolean
end function
' /**
' * @name isError
' * @description Assesses the passed object to determine if it is an Error Object.
' * @param {Dynamic} value - the object to assess
' * @return {Boolean} True if the object represents and error.
' */
' TODO: MORE SUPPORT - TRY/CATCH?
function isError(value as dynamic) as boolean
end function
' /**
' * @name isEmptyString
' * @description Checks if the supplied value is a valid String type and is not empty
' * @param {Dynamic} value The variable to be checked
' * @return {Boolean} Results of the check
' */
function isEmptyString(value as dynamic) as boolean
end function
' /**
' * @name isEqualWith
' * @description Checks if the supplied values are the same.
' * @param {Dynamic} valueOne - First value.
' * @param {Dynamic} valueTwo - Second value.
' * @return {Boolean} True if the values are the same and false if not or if any of the values are a type that could not be compared.
' */
function isEqualWith(valueOne as dynamic, valueTwo as dynamic, customizer = invalid) as boolean
end function
function isFinite(value as dynamic) as boolean
end function
' /**
' * @name isFloat
' * @description Checks if the supplied value is a valid Float type
' * @param {Dynamic} value The variable to be checked
' * @return {Boolean} Results of the check
' */
function isFloat(value as dynamic) as boolean
end function
' /**
' * @name isInteger
' * @description Checks if the supplied value is a valid Integer type
' * @param {Dynamic} value The variable to be checked
' * @return {Boolean} Results of the check
' */
function isInteger(value as dynamic) as boolean
end function
' /**
' * @description Checks if the supplied value is Invalid
' * @param {Dynamic} value The variable to be checked
' * @return {Boolean} Results of the check
' */
function isInvalid(value as dynamic) as boolean
end function
' /**
' * @name isFunction
' * @description Checks if the supplied value is a valid Function type
' * @param {Dynamic} value The variable to be checked
' * @return {Boolean} Results of the check
' */
function isFunction(value as dynamic) as boolean
end function
' /**
' * @name isLength
' * @description Checks if value is a valid array-like length
' * @param {Dynamic} value The variable to be checked
' * @return {Boolean} Results of the check
' */
function isLength(value as dynamic) as boolean
end function
' /**
' * @name isMap
' * @description Alias to isArray function
' * @param {Dynamic} value The variable to be checked
' * @return {Boolean} Results of the check
' */
function isMap(value as dynamic) as boolean
end function
' /**
' * @name isNaN
' * @description Method determines whether the passed value is NaN and its type is a valid number
' * @param {Dynamic} value - The variable to be checked
' * @return {Boolean} Results of the check
' */
function isNaN(value as dynamic) as boolean
end function
' /**
' * @name isNode
' * @description Checks if the supplied value is a valid Node type
' * @param {Dynamic} value The variable to be checked
' * @param {String} subType An optional subType parameter to further refine the check
' * @return {Boolean} Results of the check
' */
function isNode(value as dynamic, subType = "" as string) as boolean
end function
' /**
' * @name isNonEmptyArray
' * @description Checks if the supplied value is a valid Array type and not empty
' * @param {Dynamic} value The variable to be checked
' * @return {Boolean} Results of the check
' */
function isNonEmptyArray(value as dynamic) as boolean
end function
' /**
' * @name isNonEmptyAA
' * @description Checks if the supplied value is a valid and populated AssociativeArray type
' * @param {Dynamic} value The variable to be checked
' * @return {Boolean} Results of the check
' */
function isNonEmptyAA(value as dynamic)
end function
' /**
' * @name isEmptyString
' * @description Checks if the supplied value is a valid String type and is not empty
' * @param {Dynamic} value The variable to be checked
' * @return {Boolean} Results of the check
' */
function isNonEmptyString(value as dynamic) as boolean
end function
' /**
' * @name isNotInvalid
' * @description Checks if the supplied value is not Invalid or uninitialized
' * @param {Dynamic} value The variable to be checked
' * @return {Boolean} Results of the check
' */
function isNotInvalid(value as dynamic) as boolean
end function
' /**
' * @description Alias to isInvalid function
' * @param {Dynamic} value The variable to be checked
' * @return {Boolean} Results of the check
' */
function isNull(value as dynamic) as boolean
end function
' /**
' * @name isNumber
' * @description Checks if the supplied value is a valid number type
' * @param {Dynamic} value The variable to be checked
' * @return {Boolean} Results of the check
' */
function isNumber(obj as dynamic) as boolean
end function
' /**
' * @name isString
' * @description Checks if the supplied value is a valid String type
' * @param {Dynamic} value The variable to be checked
' * @return {Boolean} Results of the check
' */
function isString(value as dynamic)
end function
'/**
' * @name join
' * @description Converts all elements in array into a string separated by separator.
' * @param {Array} array - The array to convert
' * @param {String} separator - The element separator
' * @return {Array} Returns the joined string
' */
function join(array = [] as object, separator = "" as string)
end function
function kebabCase(value = "" as string)
end function
'/**
' * @name last
' * @description Gets the last element of array.
' * @param {Array} array - The array to query
' * @return {Dynamic} Returns the last element of array
' */
function last(array = []) as dynamic
end function
function lowerFirst(value = "" as string)
end function
function lt(value as dynamic, other as dynamic)
end function
function lte(value as dynamic, other as dynamic)
end function
function lowerCase(value = "" as string)
end function
' /**
' * @name max
' * @description Computes the maximum value of array. If array is empty or falsey, invalid is returned.
' * @param {Array} array - The array to iterate over
' * @return {Dynamic} Returns the maximum value
' */
function max(array = [] as object) as dynamic
end function
' /**
' * @name map
' * @description Creates an array of values by running each element in collection thru iteratee. The iteratee is invoked with three arguments:(value, index|key, collection)
' * @param {Dynamic} collection - The collection to iterate over
' * @param {Dynamic} iteratee - The function invoked per iteration
' * @return {Array} Returns the new mapped array
' */
function map(collection = {} as dynamic, iteratee = invalid as dynamic)
end function
' /**
' * @name maxBy
' * @description Computes the maximum value of array. If array is empty or falsey, invalid is returned.
' * @param {Array} array - The array to iterate over
' * @return {Dynamic} Returns the maximum value
' */
function maxBy(array = [] as object, iteratee = invalid) as dynamic
end function
function meanBy(array, iteratee = invalid)
end function
function mean(array)
end function
' /**
' * @name minBy
' * @description Computes the minimum value of array. If array is empty or falsey, invalid is returned.
' * @param {Array} array - The array to iterate over
' * @return {Dynamic} Returns the maximum value
' */
function minBy(array = [] as object, iteratee = invalid) as dynamic
end function
function multiply(multiplier as dynamic, multiplicand as dynamic) as dynamic
end function
function now() as object
end function
' /**
' * @name min
' * @description Computes the minimum value of array. If array is empty or falsey, invalid is returned.
' * @param {Array} array - The array to iterate over
' * @return {Dynamic} Returns the minumum value
' */
function min(array = [] as object) as dynamic
end function
' /**
' * @name paddString
' * @description Add padding to the supplied value after converting to a string. For example "1" to "01".
' * @param {String} value The value to add padding to.
' * @param {Integer} padLength The minimum output string length.
' * @param {String} paddingCharacter The string to use as padding.
' * @return {String} Resulting padded string.
' */
function paddString(value as dynamic, padLength = 2 as integer, paddingCharacter = "0" as dynamic) as string
end function
function random(lower = 0 as dynamic, upper = 1 as dynamic, floating = invalid) as dynamic
end function
' /**
' * @name set
' * @description Used to set a nested String value in the supplied object
' * @param {Object} aa - Object to drill down into.
' * @param {String} keyPath - A dot notation based string to the expected value.
' * @param {Dynamic} value - The value to be set.
' * @return {Boolean} True if set successfully.
' */
function set(aa as object, keyPath as string, value as dynamic) as boolean
end function
' /**
' * @name reduce
' * @description Reduces collection to a value which is the accumulated result of running each element in collection thru iteratee, where each successive invocation is supplied the return value of the previous. If accumulator is not given, the first element of collection is used as the initial value. The iteratee is invoked with four arguments:(accumulator, value, index|key, collection).
' * @param {Dynamic} collection - The collection to iterate over
' * @param {Dynamic} iteratee - The function invoked per iteration
' * @param {Integer} accumulator - The initial value
' * @return {Array} Returns the accumulated value
' */
function reduce(collection = invalid as dynamic, iteratee = invalid as dynamic, accumulator = invalid as dynamic)
end function
function round(number = 0, precision = 0 as integer)
end function
' /**
' * @name shuffle
' * @description Creates an array of shuffled values, using a version of the Fisher-Yates shuffle.
' * @param {Dynamic} collection - The collection to shuffle
' * @return {Array} Returns the new shuffled array
' */
function shuffle(collection = [] as dynamic)
end function
' /**
' * @name size
' * @description Creates an array of shuffled values, using a version of the Fisher-Yates shuffle.
' * @param {Dynamic} collection - The collection to shuffle
' * @return {Array} Returns the new shuffled array
' */
function size(collection = invalid as dynamic)
end function
'/**
' * @name slice
' * @description Creates a slice of array from start up to, but not including, end.
' * @param {Array} array - The array to slice
' * @param {Integer} startPos - The start position
' * @param {Integer} endPos - The end position
' * @return {Dynamic} Returns the slice of array
' */
function slice(array = [] as object, startPos = 0, endPos = invalid)
end function
' /**
' * @name sortBy
' * @description Creates an array of elements, sorted in ascending order by the results of running each element in a collection thru each iteratee. This method performs a stable sort, that is, it preserves the original sort order of equal elements. The iteratees are invoked with one argument: (value).
' * @param {Dynamic} collection - The collection to shuffle
' * @param {Dynamic} iteratee - The iteratees to sort by
' * @return {Array} Returns the new sorted array
' */
function sortBy(collection = invalid as dynamic, iteratee = invalid as dynamic)
end function
'/**
' * @name sortedIndex
' * @description Gets all but the first element of array
' * @param {Array} array - The sorted array to inspect
' * @return {Object} Returns the index at which value should be inserted into array
' */
function sortedIndex(array = [] as object, value = 0 as integer)
end function
' /**
' * @name stringIncludes
' * @description Check for the existence of a given sub string
' * @param {String} value The string to search
' * @param {String} subString The sub string to search for
' * @return {Boolean} Results of the search
' */
function stringIncludes(value as string, subString as string) as boolean
end function
' /**
' * @name stringIndexOf
' * @description Finds the sub string index position
' * @param {String} value The string to search
' * @param {String} subString The sub string to search for
' * @return {Integer} Results of the search
' */
function stringIndexOf(value as string, subString as string) as integer
end function
function sum(array as object)
end function
function subtract(minuend as dynamic, subtrahend as dynamic) as dynamic
end function
'/**
' * @name take
' * @description Creates a slice of array with n elements taken from the beginning
' * @param {Array} array - The sorted array to query
' * @param {Integer} n - The number of elements to take
' * @return {Object} Returns the slice of array
' */
function take(array = [] as object, n = invalid as dynamic) as object
end function
function sumBy(array = [] as object, iteratee = invalid) as dynamic
end function
' /**
'TODO: ADD MORE SUPPORT
' * @name toArray
' * @description Attempts to convert the supplied value to a array.
' * @param {Dynamic} value The value to convert.
' * @return {Object} Results of the conversion.
' */
function toArray(aa as object) as object
end function
'/**
' * @name takeRight
' * @description Creates a slice of array with n elements taken from the end
' * @param {Array} array - The sorted array to query
' * @param {Integer} n - The number of elements to take
' * @return {Object} Returns the slice of array
' */
function takeRight(array = [] as object, n = invalid as dynamic) as object
end function
function toISOString() as object
end function
' /**
' * @name toNumber
' * @description Attempts to convert the supplied value into a valid number
' * @param {Dynamic} value The variable to be converted
' * @return {Dynamic} Results of the conversion
' */
function toNumber(value as dynamic) as dynamic
end function
'/**
' * @name union
' * @description Creates a slice of array with n elements taken from the end
' * @param {Array} arrays - The arrays to inspect
' * @return {Object} Returns the new array of combined values
' */
function union(arrays = [] as object) as object
end function
' /**
' * @name toString
' * @description Attempts to convert the supplied value to a string.
' * @param {Dynamic} value The value to convert.
' * @return {String} Results of the conversion.
' */
function toString(value as dynamic) as string
end function
'/**
' * @name uniq
' * @description Creates a duplicate-free version of an array, using SameValueZero for equality comparisons, in which only the first occurrence of each element is kept. The order of result values is determined by the order they occur in the array.
' * @param {Array} array - The array to inspect
' * @return {Object} Returns the new duplicate free array
' */
function uniq(array = [] as object) as object
end function
'/**
' * @name zipObject
' * @description This method is like rodash.fromPairs except that it accepts two arrays, one of property identifiers and one of corresponding values.
' * @param {Array} array - The property identifiers
' * @param {Array} values - The property identifiers
' * @return {Object} Returns the new object
' */
function zipObject(props = [] as object, values = [] as object) as object
end function
'/**
' * @name zipObjectDeep
' * @description This method is like rodash.zipObject except that it supports property paths.
' * @param {Array} array - The property identifiers
' * @param {Array} values - The property identifiers
' * @return {Object} Returns the new object
' */
function zipObjectDeep(props = [] as object, values = [] as object) as object
end function
'/**
' * @name zip
' * @description Creates an array of grouped elements, the first of which contains the first elements of the given arrays, the second of which contains the second elements of the given arrays, and so on.
' * @param {Array} arrays - The property identifiers
' * @return {Object} Returns the new array of grouped elements
' */
function zip(arrays = [] as object) as object
end function

namespace internal
' /**
' * @name arrayToString
' * @description Attempts to convert the supplied value to a string.
' * @param {Dynamic} value The value to convert.
' * @return {String} Results of the conversion.
' */
function arrayToString(array as object) as string
end function
' /**
' * @name canBeCompared
' * @description Checks if the supplied values can be compared in a if statement.
' * @param {Dynamic} valueOne - First value
' * @param {Dynamic} valueTwo - Second value
' * @return {Boolean} True if the values can be compared in a if statement
' */
function canBeCompared(valueOne as dynamic, valueTwo as dynamic) as boolean
end function
' /**
' * @name baseForEach
' * @description The base implementation of `forEach`.
' * @param {Array|Object} - collection The collection to iterate over
' * @param {Function} iteratee The function invoked per iteration
' * @param {String} direction - the direction to traverse the collection
' * @param {String} funcValueRule - Filters functions from collection. `allow`, `omit`, `only`.
' * @return {Array|Object} Returns `collection`
' */
function baseForEach(collection = invalid as dynamic, iteratee = invalid as dynamic, direction = "left", funcValueRule = "allow" as string)
end function
' /**
' * @name booleanToString
' * @description Attempts to convert the supplied value to a string.
' * @param {Dynamic} value The value to convert.
' * @return {String} Results of the conversion.
' */
function booleanToString(bool as boolean) as string
end function
' /**
' * @name aaToString
' * @description Attempts to convert the supplied value to a string.
' * @param {Dynamic} value The value to convert.
' * @return {String} Results of the conversion.
' */
function aaToString(aa as object) as string
end function
' /**
' * @name nodeToAA
' * @description Attempts to converts a nodes top level fields to an AssociativeArray.
' * @param {Dynamic} value - The variable to be converted.
' * @param {Boolean} removeId - If set to true the nodes ID will also be stripped.
' * @param {Object} removeFields - List of keys that need to be removed from the node.
' * @return {Dynamic} Results of the conversion.
' */
function nodeToAA(value as object, removeId = false as boolean, removeFields = [] as object) as object
end function
function getDateObject() as object
end function
' /**
' * @name isKeyedValueType
' * @description Checks if the supplied value allows for key field access
' * @param {Dynamic} value The variable to be checked
' * @return {Boolean} Results of the check
' */
function isKeyedValueType(value as dynamic) as boolean
end function
function getConstants()
end function
' /**
' * @name numberToString
' * @description Attempts to convert the supplied value to a string.
' * @param {Dynamic} value The value to convert.
' * @return {String} Results of the conversion.
' */
function numberToString(value as dynamic) as string
end function
function sanitizeKeyPathArray(value = "" as string)
end function

end namespace
